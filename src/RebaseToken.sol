// SPDX-License-Identifier: MIT

// Inside each contract, library or interface, use the following order:
// Type declarations
// State variables
// Events
// Errors
// Modifiers
// Functions

pragma solidity ^0.8.24;

import {ERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";
import {AccessControl} from "@openzeppelin/contracts/access/AccessControl.sol";

/*
 * @title RebaseToken
 * @author Prathmesh Ranjan
 * @notice This is a cross-chain rebase token that incentivises users to deposit into a vault and gain interest in rewards.
 * @notice The interest rate in the smart contract can only decrease.
 * @notice Each will user will have their own interest rate that will be the global interest rate at the time of depositing.
 */
contract RebaseToken is ERC20, Ownable, AccessControl {
    /////////////////////////
    //// State Variables ////
    /////////////////////////
    uint256 private constant PRECISION_FACTOR = 1e18;
    uint256 private interestRate = 5e10;
    bytes32 private constant MINT_AND_BURN_ROLE = keccak256("MINT_AND_BURN_ROLE");
    mapping(address => uint256) private userInterestRate;
    mapping(address => uint256) private userLastUpdatedTimestamp;

    ///////////////////
    //// EVENTS ///////
    ///////////////////
    event InterestRateSet(uint256 newInterestRate);

    ///////////////////
    //// ERRORS ///////
    ///////////////////
    error RebaseToken__NewInterestRateCannotBeEqualOrHigher(uint256 interestRate);

    ///////////////////
    //// MODIFIERS ////
    ///////////////////

    ///////////////////
    //// FUNCTIONS ////
    ///////////////////
    constructor() ERC20("Rebase Token", "RBT") Ownable(msg.sender) {}

    /////////////////////////////////////
    //// EXTERNAL & PUBLIC FUNCTIONS ////
    /////////////////////////////////////
    function grantMintAndBurnRole(address _account) external onlyOwner {
        _grantRole(MINT_AND_BURN_ROLE, _account);
    }

    /**
     * @notice Set the interest rate in the contract
     * @param _newInterestRate The new interest rate to set
     * @dev The interest rate can only decrease
     */
    function setInterestRate(uint256 _newInterestRate) external onlyOwner {
        if (_newInterestRate >= interestRate) {
            revert RebaseToken__NewInterestRateCannotBeEqualOrHigher(_newInterestRate);
        }
        interestRate = _newInterestRate;
        emit InterestRateSet(_newInterestRate);
    }

    /**
     * @dev calculates the balance of the user, which is the principal balance + interest generated by the principal balance
     * @param _user the user for which the balance is being calculated
     * @return the total balance of the user
     */
    function balanceOf(address _user) public view override returns (uint256) {
        return (super.balanceOf(_user) * _calculateUserAccumulatedInterestSinceLastUpdate(_user)) / PRECISION_FACTOR;
    }

    /**
     * @notice Mints new tokens for a given address. Called when a user either deposits or bridges tokens to this chain.
     * @param _to The address to mint the tokens to.
     * @param _amount The number of tokens to mint.
     * @dev this function increases the total supply and sets the user's interest rate to the current global interest rate.
     */
    function mint(address _to, uint256 _amount) external onlyRole(MINT_AND_BURN_ROLE) {
        _mintAccruedInterest(_to);
        userInterestRate[_to] = interestRate;
        _mint(_to, _amount);
    }

    /**
     * @notice Burns tokens from the sender.
     * @param _from The address to burn the tokens from.
     * @param _amount The number of tokens to be burned
     * @dev This function decreases the total supply.
     */
    function burn(address _from, uint256 _amount) external onlyRole(MINT_AND_BURN_ROLE) {
        if (_amount == type(uint256).max) {
            _amount = balanceOf(_from); // This is done to clear token dust
        }
        _mintAccruedInterest(_from);
        _burn(_from, _amount);
    }

    /**
     * @dev Transfers tokens from the sender to the recipient. This function also mints any accrued interest since the last time the user's balance was updated.
     * @param _recipient the address of the recipient
     * @param _amount the amount of tokens to transfer
     * @return true if the transfer was successful
     */
    function transfer(address _recipient, uint256 _amount) public override returns (bool) {
        _mintAccruedInterest(msg.sender);
        _mintAccruedInterest(_recipient);
        if (_amount == type(uint256).max) {
            _amount = balanceOf(msg.sender);
        }
        if (balanceOf(_recipient) == 0) {
            userInterestRate[_recipient] = userInterestRate[msg.sender];
        }
        return super.transfer(_recipient, _amount);
    }

    /**
     * @dev Transfers tokens from the sender to the recipient. This function also mints any accrued interest since the last time the user's balance was updated.
     * @param _sender the address of the sender
     * @param _recipient the address of the recipient
     * @param _amount the amount of tokens to transfer
     * @return true if the transfer was successful
     */
    function transferFrom(address _sender, address _recipient, uint256 _amount) public override returns (bool) {
        _mintAccruedInterest(_sender);
        _mintAccruedInterest(_recipient);
        if (_amount == type(uint256).max) {
            _amount = balanceOf(_sender);
        }
        if (balanceOf(_recipient) == 0) {
            userInterestRate[_recipient] = userInterestRate[_sender];
        }
        return super.transferFrom(_sender, _recipient, _amount);
    }

    //////////////////////////////////////
    //// INTERNAL & PRIVATE FUNCTIONS ////
    //////////////////////////////////////
    /**
     * @dev accumulates the accrued interest of the user to the principal balance. This function mints the users accrued interest since they last transferred or bridged tokens.
     * @param _user the address of the user for which the interest is being minted
     */
    function _mintAccruedInterest(address _user) internal {
        // 1. Find number of tokens minted to them currently [Lets say 5]
        // 2. Calculate their current balance including the accrued interest (if any) -> using balanceOf [Lets say 10]
        // 3, Calculate the number of tokens that need to be minted to the user. [10-5 = 5]
        // 4. Call _mint to mint the user their tokens
        // 5. Set the user's last updated timestamp
        userLastUpdatedTimestamp[_user] = block.timestamp;
        uint256 balanceIncreased = balanceOf(_user) - super.balanceOf(_user);
        _mint(_user, balanceIncreased);
    }

    /**
     * @dev returns the interest accrued since the last update of the user's balance - aka since the last time the interest accrued was minted to the user.
     * @return linearInterest the interest accrued since the last update
     */
    function _calculateUserAccumulatedInterestSinceLastUpdate(address _user) internal view returns (uint256) {
        // 1. Calculate time since last update
        // 2. Calculate the linear growth
        // (principal amount) + (principal amount * user interest rate * time elapsed)
        uint256 timeElapsed = block.timestamp - userLastUpdatedTimestamp[_user];
        uint256 linearInterest = PRECISION_FACTOR + (userInterestRate[_user] * timeElapsed);
        return linearInterest;
    }

    /////////////////////////
    //// VIEW FUNCTIONS /////
    /////////////////////////
    /**
     * @dev returns the interest rate of the user
     * @param _user the address of the user
     * @return userInterestRate[_user] the interest rate of the user
     */
    function getUserInterestRate(address _user) external view returns (uint256) {
        return userInterestRate[_user];
    }

    /**
     * @dev returns the principal balance of the user. The principal balance is the last
     * updated stored balance, which does not consider the perpetually accruing interest that has not yet been minted.
     * @param _user the address of the user
     * @return the principal balance of the user
     */
    function getPrincipalBalanceOfUser(address _user) external view returns (uint256) {
        return super.balanceOf(_user);
    }

    /**
     * @dev returns the global interest rate of the token
     * @return s_interestRate
     */
    function getCurrentInterestRate() external view returns (uint256) {
        return interestRate;
    }
}
